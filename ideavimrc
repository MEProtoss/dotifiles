"
================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'


" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set ignorecase

set number
set relativenumber

set incsearch
set hlsearch

" 适配中英文输入法切换
set keep-english-in-normal
set keep-english-in-normal-and-restore-in-insert

" ================================================================================================
" 🌍🌍🌍 No Leader Keymaps 🌍🌍🌍
" ================================================================================================
" ==================================================
" 查询所有的action命令，可以使用命令： `:actionlist`
" ==================================================
"--普通模式下使用回车键，向下/向上 增加一行
nmap <CR> o<Esc>
nmap <S-Enter> O<Esc>


"--在普通和插入模式下，向下交换行/向上交换行
nnoremap <M-j> :m +1<CR>
nnoremap <M-k> :m -2<CR>
inoremap <M-j> <Esc> :m +1<CR>gi
inoremap <M-k> <Esc> :m -2<CR>gi
xnoremap <M-j> :m '>+1<cr>gv=gv
xnoremap <M-k> :m '<-2<cr>gv=gv


nmap ge <action>(GotoNextError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodUp)
nmap gi <action>(GotoImplementation)
nmap go <action>(GotoTypeDeclaration)

" bookmark
nmap mm <action>(ToggleBookmark)
nmap ma mA
nmap 'a 'A

nmap L <action>(NextTab)
nmap H <action>(PreviousTab)

" 调整垂直窗口大小（增加）
nnoremap <C-Up> :resize +2<CR>
" 调整垂直窗口大小（减少）
nnoremap <C-Down> :resize -2<CR>

" 调整水平窗口大小（增加）
nnoremap <C-Right> :vertical resize +2<CR>
" 调整水平窗口大小（减少）
nnoremap <C-Left> :vertical resize -2<CR>

" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "

" ================================================================================================
" 👻👻👻 Which-Key 👻👻👻
" ================================================================================================
set which-key
set notimeout

" d: diff
nmap <leader>dd <action>(Vcs.ShowTabbedFileHistory)

" f: Find/Format ⭐️
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft FindText"
nmap <leader>ft <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc Commands"
nmap <leader>fc <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fr RecentFiles"
nmap <leader>fr <action>(RecentFiles)

" g: Git ⭐️
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>

" i: Insert ⭐️
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(a

" j: add Semicolon and goto nextline⭐️
let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
nmap <leader>j A;<ESC>o

" l: lsp: Language server protocol (align with neovim)⭐️
let g:WhichKeyDesc_LSP = "<leader>l LSP"
let g:WhichKeyDesc_LSP_Rename = "<leader>lr Rename"
nmap <leader>lr <action>(RenameElement)


" n: No ⭐️
let g:WhichKeyDesc_No_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>


" s: Show ⭐️
let g:WhichKeyDesc_Show = "<leader>s Show"
let g:WhichKeyDesc_Show_FileStructure = "<leader>ss ShowFileStructure"
nmap <leader>ss <action>(FileStructurePopup)
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sb <action>(ShowBookmarks)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sb ShowParameterInfo"
nmap <leader>sp <action>(ParameterInfo)

" r: Run/Re ⭐️
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
map <leader>rn <action>(RenameElement)

" w: Window ⭐️
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)
let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>wl splitWindowVertically"
nmap <leader>wl <action>(Macro.SplitVertically)
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc closeActiveWindow"
nmap <leader>wc <c-w>c

" z: zip(fold) ⭐️
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)

" c: Close ⭐️;
let g:WhichKeyDesc_CloseBuffer = "<leader>bd CloseBuffer"
nmap <leader>bd :q!<CR>
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>bl CloseAllToTheLeft"
nmap <leader>bl <action>(CloseAllToTheLeft)
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>bo CloseAllToTheRight"
nmap <leader>br <action>(CloseAllToTheRight)


" e: Toggle Explorer ⭐️
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorer"
nmap <leader>e <action>(ActivateProjectToolWindow)
" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)


" 选择主题
nmap <leader>uc <Action>(ChangeLaf)
" vim模式开关
nmap <leader>vim <Action>(VimPluginToggle)

" 快捷方式
nmap Q :q<CR>

nnoremap <C-A> <Home>
inoremap <C-A> <Esc>I
vnoremap <C-A> <Esc>0

"重写shift+左右
vnoremap <S-right> e
inoremap <S-right> <Esc>ea

"快速删除
nmap <BS> \"_ciw

"only change text
xmap <BS> \"_d
nmap x \"_x

inoremap <a-o> <Esc>o
inoremap <a-s-o> <Esc>O

" 注释
nmap gcc <Action>(CommentByLineComment)
xmap gc <Action>(CommentByLineComment)<Esc>

" easymotion
let g:EasyMotion_do_mapping = 0
set easymotion
nmap <leader><leader> <Plug>(easymotion-s)

noremap <C-D> cc<Esc>
inoremap <C-D> <Esc>cc

"重写shift + 方向 选择文本
inoremap <s-up> <esc>vkl
inoremap <s-down> <esc>lvjh

noremap <s-up> Vk
noremap <s-down> Vj

vnoremap <s-up> k
vnoremap <s-down> j

noremap <s-left> <left>vh
noremap <s-right> vl










