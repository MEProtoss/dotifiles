"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/vendor/machineId.ts
var machineId_exports = {};
__export(machineId_exports, {
  machineId: () => machineId,
  machineIdSync: () => machineIdSync
});
function isWindowsProcessMixedOrNativeArchitecture() {
  if (process.platform !== "win32") {
    return "";
  }
  if (process.arch === "ia32" && process.env.hasOwnProperty("PROCESSOR_ARCHITEW6432")) {
    return "mixed";
  }
  return "native";
}
function hash(theGuid) {
  return (0, import_crypto.createHash)("sha256").update(theGuid).digest("hex");
}
function expose(result) {
  switch (platform) {
    case "darwin":
      return result.split("IOPlatformUUID")[1].split("\n")[0].replace(/\=|\s+|\"/gi, "").toLowerCase();
    case "win32":
      return result.toString().split("REG_SZ")[1].replace(/\r+|\n+|\s+/gi, "").toLowerCase();
    case "linux":
      return result.toString().replace(/\r+|\n+|\s+/gi, "").toLowerCase();
    case "freebsd":
      return result.toString().replace(/\r+|\n+|\s+/gi, "").toLowerCase();
    default:
      throw new Error(`Unsupported platform: ${process.platform}`);
  }
}
function machineIdSync(original) {
  const id = expose((0, import_child_process.execSync)(guid[platform]).toString());
  return original ? id : hash(id);
}
function machineId(original) {
  return new Promise((resolve, reject) => {
    return (0, import_child_process.exec)(guid[platform], {}, (err, stdout, stderr) => {
      if (err) {
        return reject(
          new Error(`Error while obtaining machine id: ${err.stack}`)
        );
      }
      const id = expose(stdout.toString());
      return resolve(original ? id : hash(id));
    });
  });
}
var import_child_process, import_crypto, platform, win32RegBinPath, guid;
var init_machineId = __esm({
  "src/vendor/machineId.ts"() {
    "use strict";
    import_child_process = require("child_process");
    import_crypto = require("crypto");
    ({ platform } = process);
    win32RegBinPath = {
      native: "%windir%\\System32",
      mixed: "%windir%\\sysnative\\cmd.exe /c %windir%\\System32"
    };
    guid = {
      darwin: "ioreg -rd1 -c IOPlatformExpertDevice",
      win32: `${win32RegBinPath[isWindowsProcessMixedOrNativeArchitecture()]}\\REG.exe QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid`,
      linux: "( cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || hostname ) | head -n 1 || :",
      freebsd: "kenv -q smbios.system.uuid || sysctl -n kern.hostuuid"
    };
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  activate: () => activate
});
module.exports = __toCommonJS(src_exports);
var import_coc = require("coc.nvim");
var coc = __toESM(require("coc.nvim"));

// package.json
var version = "0.7.3";

// src/index.ts
var { machineId: machineId2 } = (init_machineId(), __toCommonJS(machineId_exports));
async function activate(context) {
  await showTelemetryPrompt(context);
  const telemetryEnabled = getExtensionConfig().get("telemetry") ?? false;
  const languageClient = new import_coc.LanguageClient(
    "solidity",
    "Solidity Language Server",
    {
      module: require.resolve("@nomicfoundation/solidity-language-server"),
      transport: coc.TransportKind.ipc
    },
    {
      documentSelector: ["solidity"],
      synchronize: {
        configurationSection: "solidity",
        fileEvents: [
          coc.workspace.createFileSystemWatcher("**/hardhat.config.{ts,js}"),
          coc.workspace.createFileSystemWatcher("**/foundry.toml"),
          coc.workspace.createFileSystemWatcher(
            "**/{truffle-config,truffle}.js"
          ),
          coc.workspace.createFileSystemWatcher("**/ape-config.yaml"),
          coc.workspace.createFileSystemWatcher("**/remappings.txt"),
          coc.workspace.createFileSystemWatcher("**/*.sol")
        ]
      },
      initializationOptions: {
        extensionName: "@nomicfoundation/coc-solidity",
        extensionVersion: version,
        env: "production",
        telemetryEnabled,
        machineId: await machineId2(),
        extensionConfig: getExtensionConfig()
      }
    }
  );
  context.subscriptions.push(import_coc.services.registLanguageClient(languageClient));
}
async function showTelemetryPrompt(context) {
  const shownTelemetryPrompt = context.globalState.get("shownTelemetryPrompt");
  if (!shownTelemetryPrompt) {
    const pick = await coc.window.showMenuPicker(
      ["Accept", "Decline"],
      "Support coc-solidity with crash reports?"
    );
    switch (pick) {
      case 0:
        getExtensionConfig().update("telemetry", true, true);
        return context.globalState.update("shownTelemetryPrompt", true);
      case 1:
        getExtensionConfig().update("telemetry", false, true);
        return context.globalState.update("shownTelemetryPrompt", true);
      default:
        break;
    }
  }
}
function getExtensionConfig() {
  return coc.workspace.getConfiguration("@nomicfoundation/coc-solidity");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  activate
});
